// 🖊️設置devcontainer.json說明參考
// 此JSON檔案個別屬性說明【規格書】： https://containers.dev/implementors/json_reference/
// For format details, see https://aka.ms/devcontainer.json. For config options, see the
// 1. README at: https://github.com/devcontainers/templates/tree/main/src/miniconda
// 2. README at: https://github.com/devcontainers/templates/tree/main/src/miniconda-postgres
// 以下設定相關的檔案皆存放在【project目錄】下的目錄.devcontainer之下
// 📁 c:\git_test\basic_dev
//     📁 .devcontainer
//			devcontainer.json說明參考 	 ==>開發容器設定檔
//			noop.text					==>防止Dockerfile中ADD、COPY...檔案存取防呆機制
//     📁.github
//     📁src_XXXX
//			text.txt
//     📁 vnpy_src
//		.env						==>環境變數設定檔
//		docker-compose.yml			==>微服務設定檔
//		Dockerfile					==>開發影像組成設定檔
//		enviroment.yml 				==>pip、conda相關套件安裝設定
//		main.py

{
	// 出現在狀態列中【遠端電腦】名稱
	"name": "vnpy+fastAPI(V0.1.0)",
	
	// (1-1)---------------------------------------------------------------------
	// 以下設定是給只存在單一一個Dockerfile時候使用
	// 其中context
	// "build": { 
	// 	"context": "..",
	// 	"dockerfile": "../Dockerfile"
	// },

	// (1-2)---------------------------------------------------------------------
	// 以下設定適合應用於【Dockerfile + docker-compose.yml】共同使用條件下：
	"dockerComposeFile": "../docker-compose.yml",		// 1. 設定 docker-compose.yml
	"service": "app",									// 2. 微服物器名稱
	//"workspaceFolder": "/workspaces/${localWorkspaceFolderBasename}",
	"workspaceFolder": "/workspace",					// 3. 設定微服務登入後所在目錄位置
	
	// (2)------------------------------------------------------------------------
	"features": {
	 	//"ghcr.io/devcontainers/features/python:1": {
		//	 "version": "3.10.15"
	 	//}
	 },
	// (3)------------------------------------------------------------------------
	 "mounts": [
		"source=${localWorkspaceFolder},target=/workspace,type=bind,consistency=cached"
	],
	// (4)------------------------------------------------------------------------
	// Configure tool-specific properties.
	// "customizations": {},
	"customizations": {
		"vscode": {
			"extensions": [
				"donjayamanne.python-environment-manager",
				"donjayamanne.python-extension-pack"
			]
		},
		"settings": {
			//for base
			//"python.defaultInterpreterPath": "/opt/miniconda/bin/python"
			
			// 😍😍😍😍😍😍😍😍😍
			// for virtural env
            "python.defaultInterpreterPath": "/opt/miniconda/envs/${localEnv:VIRTUAL_ENV_NAME}/bin/python" 
          }
	},
	
	// Uncomment to connect as root instead. More info: https://aka.ms/dev-containers-non-root.
	// "remoteUser": "root"
	
	// (5)------------------------------------------------------------------------
	// Use 'forwardPorts' to make a list of ports inside the container available locally.
	"forwardPorts": [],
	// -------------------------------------------------------------------------
	// remoteEnv 屬性： 
	// 	remoteEnv 屬性用於設定容器內的環境變數。 
	// 可以通過 remoteEnv 來設定需要暴露給容器內的環境變數。這些變數是在vs code內部使用的
	// 也就是說原先容器內沒有這些變數，現在可以透過該remoteEnv屬性傳遞給容器內使用。
	// 目前已知這些變數可以在terminal、launch.json、task.json內使用。
	"remoteEnv": {
		"localWorkspaceFolder": "${localWorkspaceFolder}",
		"localWorkspaceFolderBasename":"${localWorkspaceFolderBasename}",
		"containerWorkspaceFolder": "${containerWorkspaceFolder}",
		"containerWorkspaceFolderBasename": "${containerWorkspaceFolderBasename}",
		"devcontainerId": "${devcontainerId}",
		"LOCAL_USER_PATH": "${localEnv:HOME}${localEnv:USERPROFILE}",
		
		"My_Local_Env": "${localEnv:VIRTUAL_ENV_NAME}", // ?????????
		"My_Path": "/workspaces/${localWorkspaceFolderBasename}",
		"My_Env_Name": "${VIRTUAL_ENV_NAME}"  //無法引用 Dockerfile中定義的環境變數
	},
	// (6)------------------------------------------------------------------------
	// 🚩🚩🚩 
	// 注意：是建立container之後才執行，所以後續的運作是不會進入Image只能當作臨時的開發、除錯情境使用。
	// Use 'postCreateCommand' to run commands after the container is created.
	// "postCreateCommand":"pip install -r requirements.txt && ls -al && env",
	// "postCreateCommand": "python --version",
	"postCreateCommand":"chmod +x $WORKSPACE_DIR/pcc.sh && $WORKSPACE_DIR/pcc.sh"
	
}
